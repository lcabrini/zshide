#! /bin/sh

# Help vim out a bit.
# vim: ft=zsh

read -rd '' no_zsh <<EOF
Z Shell could not be found.

I was not able to find the zsh executable anywhere in your PATH, but
zshide requires this shell to be installed on your system. If you are
sure that you have zsh installed, you may need to update your PATH to
include the location where the zsh executable is installed.

If you haven't yet installed Z Shell, you can do so (requires you to be
root or to have sudo access to install packages). You might also be able
to build zsh yourself.

To install on Fedora Linux:
  # dnf install zsh
To install on Red Hat or Cent OS:
  # yum install zsh
To install on Debian or Ubuntu:
  # apt install zsh

Once you have ensured that Z Shell is installed and that the zsh command
is available in your PATH, you can try to run this installer again.
EOF

if [ -z "$RUNNING_ZSH" ]; then
    which zsh > /dev/null 2>&1
    if [ "$?" -eq "0" ]; then
        export RUNNING_ZSH=1
        zsh $0 "$@"
        exit $?
    else
        echo "Z Shell could not be found"
        did_install_zsh=no
        for pm in dnf yum apt; do
            which $pm > /dev/null 2>&1
            if [ "$?" -eq "0" ]; then
                echo "Would you like to install it now?"
                read ans
                case $ans in
                    y|yes)
                        sr=$(sudo -nv 2>&1) | awk '{ print $1 }'
                        ec=$?

                        use_sudo=no
                        if [ "$ec" -eq "0" ]; then
                            use_sudo=yes
                        elif [ "$sr" = "sudo:" ]; then
                            use_sudo=yes
                        fi

                        if [ "$use_sudo" = "yes" ]; then
                            # TODO: is this going to work on all
                            # supported systems?
                            sudo $pm -y install zsh
                            # TODO: check for errors
                            did_install_zsh=yes
                            break
                        else
                            su -c "$pm -y install zsh"
                            # TODO: check for errors
                            did_install_zsh=yes
                            break
                        fi
                        ;;

                    n|no)
                        print "Cannot continue without zsh."
                        exit 1
                        ;;

                    *)
                        print "Unrecognized answer. Aborting."
                        exit 1
                esac
            fi
        done
        if [ "$did_install_zsh" = "no" ]; then
            echo "Z Shell was not installed. Aborting."
            exit 1
        fi
    fi
fi

# Installation locations. You can change to suit your preferences.
prefix=$HOME
ZI_HOME=$prefix/.zshide
bindir=$prefix/bin
tpldir=$ZI_HOME/t

util=$PWD/lib/util.zsh
if [[ -f $util ]]; then
    . $util
else
    print "Cannot find the util script. Aborting." >&2
    exit 1
fi

ZI_COLOR=no

setup_colors
show_help=no
interactive=yes
while (($#)); do
    arg=$1
    shift

    case $arg in
        (-c|--color)
            ZI_COLOR=yes
            setup_colors
            ;;


        (-h|--help)
            show_help=yes
            ;;

        (-I|non-interactive)
            interactive=no

        (*)
            printlog install error "unknown argument" $arg
            exit 1
            ;;
    esac
done

if check_yesno $show_help; then
    print_usage $(basename $0)
    print_option c color "enable color output"
    print_option h help "show this help message"
    print_option I non-interactive "don't use interactive"
    exit 0
fi

os=$(detect_os)
if [[ -n $os ]]; then
    printlog install info "detected OS" $os
else
    printlog install warning "could not detect OS"
fi

pkgman=$(get_package_install_command $os)
if [[ $? -eq 0 ]]; then
    printlog install info "got $os package install command" $pkgman
else
    printlog install error "could not get $os package install command"
fi

# TODO: if we need to check for any global dependencies, we should do it
# here.

typeset -a dirlist=(
    $ZI_HOME 
    $bindir 
    $tpldir 
    $ZI_HOME/lib 
    $ZI_HOME/github
    $ZI_HOME/modules
)

for dir in $dirlist; do
    if [[ -d $dir ]]; then
        printlog install info "directory already exists" $dir
    else
        mkdir $dir > /dev/null 2>&1
        if [[ $? -eq 0 ]]; then
            printlog install info "created directory" $dir
        else
            printlog install error "unable to create directory" $dir
            # TODO: find out what caused it to fail and offer options, if
            # possible.
            exit 1
        fi
    fi
done

if [[ -f $ZI_HOME/zshiderc ]]; then
    printlog install info "zshiderc already exists"
else
    touch $ZI_HOME/zshiderc > /dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        printlog install info "created zshiderc"
    else
        printlog install error "unable to create zshiderc"
        exit 1
    fi
fi

for mod in modules/*.zsh; do
    . $mod
    if typeset -f ${mod:t:r}_install > /dev/null 2>&2; then
        ${mod:t:r}_install
    else
        printlog install warning "missing install function for module" \
            ${mod:t:r}
    fi
done

sed "s|@ZI_HOME@|$ZI_HOME|" zi > $bindir/zi
chmod +x $bindir/zi
printlog install info "installed zi"

exit

info "Installing zshide scripts"
for f in *.zsh; do
    case $f in
        (zi.zsh|install.zsh)
            ;;
        (*)
            inst $f
            cp $f $ZI_HOME
            ;;
    esac
done

MODLIST=$TPLDIR/.modified
test -f $MODLIST || touch $MODLIST

info "Installing templates"
cd t
for f in *; do
    if [[ -n $(grep "^${f}$" $MODLIST) ]]; then
        warn "not copying $f, it has been modified"
    else
        inst $f
        cp $f $TPLDIR
    fi
done
cd ..

info "installing github json"
cd github
cp * $ZI_HOME/github
cd ..

if [[ ! -d $ZI_HOME/cache ]]; then
    info "creating cache directory"
    mkdir $ZI_HOME/cache
fi

info "installing os-specific package lists"
cp pkg-* $ZI_HOME
info "Setting up environment"
sed "s|@ZI_HOME@|$ZI_HOME|" zshrc > $ZI_HOME/zshrc
#cp zshrc $ZI_HOME
test -f $HOME/.zshrc || touch $HOME/.zshrc
zshide_string="added by zshide"
zshrc_updated=$(grep "^# $zshide_string" $HOME/.zshrc)

IFS= read -rd '' zshrc <<EOF

# $zshide_string
test -f $ZI_HOME/zshrc && . $ZI_HOME/zshrc
EOF

if [[ -z $zshrc_updated ]]; then
    print "$zshrc" >> $HOME/.zshrc
fi
